{
	"completions":
	[
		{ "trigger": "accumulate", "contents": "std::accumulate(${1:v}${2:.begin()}, ${1:v}${3:.end()}, ${4:0});" },
		{ "trigger": "atan2l", "contents": "__builtin_atan2l" },
		{ "trigger": "beginend", "contents": "begin(), ${1:v}.end()" },
		{ "trigger": "bitcount", "contents": "__builtin_popcount" },
		{ "trigger": "case", "contents": "case" },
		{ "trigger": "cosl", "contents": "__builtin_cosl" },
		{ "trigger": "define", "contents": "#define ${1:SYMBOL} ${2:value}" },
		{ "trigger": "deque", "contents": "std::deque<${1:int}> q$0;" },
		{ "trigger": "elif", "contents": "else if (${1:/* condition */}) " },
		{ "trigger": "else", "contents": "else " },
		{ "trigger": "endl", "contents": "'\n'" },
		{ "trigger": "fabsl", "contents": "__builtin_fabsl" },
		{ "trigger": "fill", "contents": "std::fill(${1:v}${2:.begin()}, ${1:v}${3:.end()}, ${4:value});" },
		{ "trigger": "for", "contents": "for (int ${1:i} = ${2:0}; ${1:i} < ${3:count}; ${1:i}${4:++}) " },
		{ "trigger": "fora", "contents": "for (auto ${1:i} : ${2:v}) " },
		{ "trigger": "freopen", "contents": "freopen(${1:argv[1]}, ${2:\"r\"}, ${3:stdin});" },
		{ "trigger": "gcd", "contents": "__gcd" },
		{ "trigger": "if", "contents": "if (${1:/* condition */}) " },
		{ "trigger": "inc", "contents": "#include <${1:bits/stdc++.h}>" },
		{ "trigger": "inline", "contents": "inline " },
		{ "trigger": "insert", "contents": "insert" },
		{ "trigger": "long", "contents": "long long" },
		{ "trigger": "mp", "contents": "make_pair" },
		{ "trigger": "mt", "contents": "make_tuple" },
		{ "trigger": "max_element", "contents": "std::max_element(${1:v}${2:.begin()}, ${1:v}${3:.end()}${4/.+/, /}${4:func});" },
		{ "trigger": "max", "contents": "max" },
		{ "trigger": "min_element", "contents": "std::min_element(${1:v}${2:.begin()}, ${1:v}${3:.end()}${4/.+/, /}${4:func});" },
		{ "trigger": "min", "contents": "min" },
		{ "trigger": "using", "contents": "using namespace ${1:std};" },
		{ "trigger": "next_permutation", "contents": "std::next_permutation(${1:v}${2:.begin()}, ${1:v}${3:.end()});" },
		{ "trigger": "pair", "contents": "std::pair<${1:first}, ${2:second}> p$0;" },
		{ "trigger": "priority_queue", "contents": "std::priority_queue<${1:int}, std::vector<${1:int}>, std::greater<${1:int}> > q$0;" },
		{ "trigger": "pb", "contents": "push_back" },
		{ "trigger": "queue", "contents": "std::queue<${1:int}> q$0;" },
		{ "trigger": "ret", "contents": "return" },
		{ "trigger": "reverse", "contents": "std::reverse(${1:v}${2:.begin()}, ${1:v}${3:.end()});" },
		{ "trigger": "scanf", "contents": "scanf(\"${1:%s}\"${1/([^%]|%%)*(%.)?.*/(?2:, :\\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\\);)/}" },
		{ "trigger": "set", "contents": "std::set<${1:int}> s$0;" },
		{ "trigger": "sinl", "contents": "__builtin_sinl" },
		{ "trigger": "size", "contents": "size()" },
		{ "trigger": "sort", "contents": "std::sort(${1:v}${2:.begin()}, ${1:v}${3:.end()}${4/.+/, /}${4:func});" },
		{ "trigger": "sqrtl", "contents": "__builtin_sqrtl" },
		{ "trigger": "static", "contents": "static " },
		{ "trigger": "stoi", "contents": "stoi" },
		{ "trigger": "string", "contents": "string" },
		{ "trigger": "swap", "contents": "swap" },
		{ "trigger": "swi", "contents": "switch" },
		{ "trigger": "sync", "contents": "std::ios_base::sync_with_stdio(${1:false});" },
		{ "trigger": "template", "contents": "template <typename ${1:T}>" },
		{ "trigger": "to_string", "contents": "to_string" },
		{ "trigger": "tuple", "contents": "std::tuple<${1:elems...}> t$0;" },
		{ "trigger": "typedef", "contents": "typedef ${2:value} ${1:SYMBOL};" },
		{ "trigger": "typeof", "contents": "__typeof" },
		{ "trigger": "unordered_map", "contents": "std::unordered_map<${1:key}, ${2:value}> map$0;" },
		{ "trigger": "unordered_set", "contents": "std::unordered_set<${1:int}> s$0;" },
		{ "trigger": "while", "contents": "while (${1:/* condition */}) " }
	],
	"scope": "source.c, source.c++, source.c++11"
}
